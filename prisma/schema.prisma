// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x","debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  Link        String?
  techStack   String   // Technologies used in the project
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      ProjectImage[]
}

model ProjectImage {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      BlogImage[]
  tags        Tags[]
  categoryId  String?  // Add relation field for Category
  category    Category? @relation(fields: [categoryId], references: [id], name: "CategoryBlogs") // Define relation name explicitly
}

model Tags {
  id        String @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String
  blogs     Blog   @relation(fields: [blogId], references: [id])
}

model BlogImage {
  id        String   @id @default(cuid())
  url       String
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String   // Job title or role
  company     String   // Name of the company or organization
  location    String?  // Optional location
  description String   // Job responsibilities and achievements
  startDate   DateTime // Start date of the job
  endDate     DateTime? // End date (optional if current)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   // Name of the skill (e.g., JavaScript, React)
  level     String   // Proficiency level (e.g., Beginner, Intermediate, Expert)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String   // Name of the person contacting
  email     String   // Email of the person
  message   String   // Message sent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id                String   @id @default("default")
  // General settings
  siteTitle         String   @default("My Portfolio")
  siteDescription   String   @default("A showcase of my work and writing")
  siteUrl           String   @default("https://example.com")
  contactEmail      String   @default("contact@example.com")
  
  // Social media settings
  twitter           String?
  github            String?
  linkedin          String?
  instagram         String?
  
  // Appearance settings
  darkMode          Boolean  @default(false)
  accentColor       String   @default("#0070f3")
  showAuthor        Boolean  @default(true)
  showDate          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String   // Name of the category (e.g., "Technology", "Lifestyle")
  description String?  // Optional description for the category
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogs       Blog[]   @relation("CategoryBlogs")  // One-to-many relation with Blog
}
